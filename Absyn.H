#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Prog;
class Stm;
class ExpBool;
class ExpNum;
class ExpStr;
class Program;
class StmAssignInt;
class StmAssignStr;
class StmIf;
class StmIfElse;
class StmWhileFirst;
class StmWhileSecond;
class StmBlock;
class StmOutputNum;
class StmOutputStr;
class StmExit;
class Eeq;
class Eneq;
class Elt;
class Egt;
class Ele;
class Ege;
class EMinus;
class EAdd;
class ESub;
class EMul;
class EDiv;
class EMod;
class EInt;
class ENumVar;
class StmReadInt;
class StmLength;
class StmPosition;
class StmConcat;
class StmSubstr;
class EStr;
class EStrVar;
class StmReadStr;
class OrExp;
class AndExp;
class EStrEq;
class EStrNeq;
class NotExp;
class TrueVal;
class FalseVal;
class ListStm;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProg(Prog *p) = 0;
  virtual void visitStm(Stm *p) = 0;
  virtual void visitExpBool(ExpBool *p) = 0;
  virtual void visitExpNum(ExpNum *p) = 0;
  virtual void visitExpStr(ExpStr *p) = 0;
  virtual void visitProgram(Program *p) = 0;
  virtual void visitStmAssignInt(StmAssignInt *p) = 0;
  virtual void visitStmAssignStr(StmAssignStr *p) = 0;
  virtual void visitStmIf(StmIf *p) = 0;
  virtual void visitStmIfElse(StmIfElse *p) = 0;
  virtual void visitStmWhileFirst(StmWhileFirst *p) = 0;
  virtual void visitStmWhileSecond(StmWhileSecond *p) = 0;
  virtual void visitStmBlock(StmBlock *p) = 0;
  virtual void visitStmOutputNum(StmOutputNum *p) = 0;
  virtual void visitStmOutputStr(StmOutputStr *p) = 0;
  virtual void visitStmExit(StmExit *p) = 0;

  virtual bool visitEeq(Eeq *p) = 0;
  virtual bool visitEneq(Eneq *p) = 0;
  virtual bool visitElt(Elt *p) = 0;
  virtual bool visitEgt(Egt *p) = 0;
  virtual bool visitEle(Ele *p) = 0;
  virtual bool visitEge(Ege *p) = 0;

  virtual Integer visitEMinus(EMinus *p) = 0;
  virtual Integer visitEAdd(EAdd *p) = 0;
  virtual Integer visitESub(ESub *p) = 0;
  virtual Integer visitEMul(EMul *p) = 0;
  virtual Integer visitEDiv(EDiv *p) = 0;
  virtual Integer visitEMod(EMod *p) = 0;
  virtual Integer visitEInt(EInt *p) = 0;
  virtual Integer visitENumVar(ENumVar *p) = 0;
  virtual Integer visitStmReadInt(StmReadInt *p) = 0;
  virtual Integer visitStmLength(StmLength *p) = 0;
  virtual Integer visitStmPosition(StmPosition *p) = 0;

  virtual String visitStmConcat(StmConcat *p) = 0;
  virtual String visitStmSubstr(StmSubstr *p) = 0;
  virtual String visitEStr(EStr *p) = 0;
  virtual String visitEStrVar(EStrVar *p) = 0;
  virtual String visitStmReadStr(StmReadStr *p) = 0;

  virtual bool visitOrExp(OrExp *p) = 0;
  virtual bool visitAndExp(AndExp *p) = 0;
  virtual bool visitEStrEq(EStrEq *p) = 0;
  virtual bool visitEStrNeq(EStrNeq *p) = 0;
  virtual bool visitNotExp(NotExp *p) = 0;
  virtual bool visitTrueVal(TrueVal *p) = 0;
  virtual bool visitFalseVal(FalseVal *p) = 0;

  virtual void visitListStm(ListStm *p) = 0;


  virtual Integer visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual String visitString(String x) = 0;
  virtual Ident visitIdent(Ident x) = 0;

};

template <typename T> 
class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual T accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Prog : public Visitable<void>
{
public:
  virtual Prog *clone() const = 0;

};

class Stm : public Visitable<void>
{
public:
  virtual Stm *clone() const = 0;

};

class ExpBool : public Visitable<bool>
{
public:
  virtual ExpBool *clone() const = 0;

};

class ExpNum : public Visitable<Integer>
{
public:
  virtual ExpNum *clone() const = 0;

};

class ExpStr : public Visitable<String>
{
public:
  virtual ExpStr *clone() const = 0;

};



class Program : public Prog
{
public:
  ListStm *liststm_;

  Program(const Program &);
  Program &operator=(const Program &);
  Program(ListStm *p1);
  ~Program();
  virtual void accept(Visitor *v);
  virtual Program *clone() const;
  void swap(Program &);
};

class StmAssignInt : public Stm
{
public:
  Ident ident_;
  ExpNum *expnum_;

  StmAssignInt(const StmAssignInt &);
  StmAssignInt &operator=(const StmAssignInt &);
  StmAssignInt(Ident p1, ExpNum *p2);
  ~StmAssignInt();
  virtual void accept(Visitor *v);
  virtual StmAssignInt *clone() const;
  void swap(StmAssignInt &);
};

class StmAssignStr : public Stm
{
public:
  Ident ident_;
  ExpStr *expstr_;

  StmAssignStr(const StmAssignStr &);
  StmAssignStr &operator=(const StmAssignStr &);
  StmAssignStr(Ident p1, ExpStr *p2);
  ~StmAssignStr();
  virtual void accept(Visitor *v);
  virtual StmAssignStr *clone() const;
  void swap(StmAssignStr &);
};

class StmIf : public Stm
{
public:
  ExpBool *expbool_;
  Stm *stm_;

  StmIf(const StmIf &);
  StmIf &operator=(const StmIf &);
  StmIf(ExpBool *p1, Stm *p2);
  ~StmIf();
  virtual void accept(Visitor *v);
  virtual StmIf *clone() const;
  void swap(StmIf &);
};

class StmIfElse : public Stm
{
public:
  ExpBool *expbool_;
  Stm *stm_1;
  Stm *stm_2;

  StmIfElse(const StmIfElse &);
  StmIfElse &operator=(const StmIfElse &);
  StmIfElse(ExpBool *p1, Stm *p2, Stm *p3);
  ~StmIfElse();
  virtual void accept(Visitor *v);
  virtual StmIfElse *clone() const;
  void swap(StmIfElse &);
};

class StmWhileFirst : public Stm
{
public:
  ExpBool *expbool_;
  Stm *stm_;

  StmWhileFirst(const StmWhileFirst &);
  StmWhileFirst &operator=(const StmWhileFirst &);
  StmWhileFirst(ExpBool *p1, Stm *p2);
  ~StmWhileFirst();
  virtual void accept(Visitor *v);
  virtual StmWhileFirst *clone() const;
  void swap(StmWhileFirst &);
};

class StmWhileSecond : public Stm
{
public:
  Stm *stm_;
  ExpBool *expbool_;

  StmWhileSecond(const StmWhileSecond &);
  StmWhileSecond &operator=(const StmWhileSecond &);
  StmWhileSecond(Stm *p1, ExpBool *p2);
  ~StmWhileSecond();
  virtual void accept(Visitor *v);
  virtual StmWhileSecond *clone() const;
  void swap(StmWhileSecond &);
};

class StmBlock : public Stm
{
public:
  ListStm *liststm_;

  StmBlock(const StmBlock &);
  StmBlock &operator=(const StmBlock &);
  StmBlock(ListStm *p1);
  ~StmBlock();
  virtual void accept(Visitor *v);
  virtual StmBlock *clone() const;
  void swap(StmBlock &);
};

class StmOutputNum : public Stm
{
public:
  ExpNum *expnum_;

  StmOutputNum(const StmOutputNum &);
  StmOutputNum &operator=(const StmOutputNum &);
  StmOutputNum(ExpNum *p1);
  ~StmOutputNum();
  virtual void accept(Visitor *v);
  virtual StmOutputNum *clone() const;
  void swap(StmOutputNum &);
};

class StmOutputStr : public Stm
{
public:
  ExpStr *expstr_;

  StmOutputStr(const StmOutputStr &);
  StmOutputStr &operator=(const StmOutputStr &);
  StmOutputStr(ExpStr *p1);
  ~StmOutputStr();
  virtual void accept(Visitor *v);
  virtual StmOutputStr *clone() const;
  void swap(StmOutputStr &);
};

class StmExit : public Stm
{
public:

  StmExit(const StmExit &);
  StmExit &operator=(const StmExit &);
  StmExit();
  ~StmExit();
  virtual void accept(Visitor *v);
  virtual StmExit *clone() const;
  void swap(StmExit &);
};

class EMinus : public ExpNum
{
public:
  ExpNum *expnum_;

  EMinus(const EMinus &);
  EMinus &operator=(const EMinus &);
  EMinus(ExpNum *p1);
  ~EMinus();
  virtual Integer accept(Visitor *v);
  virtual EMinus *clone() const;
  void swap(EMinus &);
};

class EAdd : public ExpNum
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  EAdd(const EAdd &);
  EAdd &operator=(const EAdd &);
  EAdd(ExpNum *p1, ExpNum *p2);
  ~EAdd();
  virtual Integer accept(Visitor *v);
  virtual EAdd *clone() const;
  void swap(EAdd &);
};

class ESub : public ExpNum
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  ESub(const ESub &);
  ESub &operator=(const ESub &);
  ESub(ExpNum *p1, ExpNum *p2);
  ~ESub();
  virtual Integer accept(Visitor *v);
  virtual ESub *clone() const;
  void swap(ESub &);
};

class EMul : public ExpNum
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  EMul(const EMul &);
  EMul &operator=(const EMul &);
  EMul(ExpNum *p1, ExpNum *p2);
  ~EMul();
  virtual Integer accept(Visitor *v);
  virtual EMul *clone() const;
  void swap(EMul &);
};

class EDiv : public ExpNum
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  EDiv(const EDiv &);
  EDiv &operator=(const EDiv &);
  EDiv(ExpNum *p1, ExpNum *p2);
  ~EDiv();
  virtual Integer accept(Visitor *v);
  virtual EDiv *clone() const;
  void swap(EDiv &);
};

class EMod : public ExpNum
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  EMod(const EMod &);
  EMod &operator=(const EMod &);
  EMod(ExpNum *p1, ExpNum *p2);
  ~EMod();
  virtual Integer accept(Visitor *v);
  virtual EMod *clone() const;
  void swap(EMod &);
};

class EInt : public ExpNum
{
public:
  Integer integer_;

  EInt(const EInt &);
  EInt &operator=(const EInt &);
  EInt(Integer p1);
  ~EInt();
  virtual Integer accept(Visitor *v);
  virtual EInt *clone() const;
  void swap(EInt &);
};

class ENumVar : public ExpNum
{
public:
  Ident ident_;

  ENumVar(const ENumVar &);
  ENumVar &operator=(const ENumVar &);
  ENumVar(Ident p1);
  ~ENumVar();
  virtual Integer accept(Visitor *v);
  virtual ENumVar *clone() const;
  void swap(ENumVar &);
};

class StmReadInt : public ExpNum
{
public:

  StmReadInt(const StmReadInt &);
  StmReadInt &operator=(const StmReadInt &);
  StmReadInt();
  ~StmReadInt();
  virtual Integer accept(Visitor *v);
  virtual StmReadInt *clone() const;
  void swap(StmReadInt &);
};

class StmLength : public ExpNum
{
public:
  ExpStr *expstr_;

  StmLength(const StmLength &);
  StmLength &operator=(const StmLength &);
  StmLength(ExpStr *p1);
  ~StmLength();
  virtual Integer accept(Visitor *v);
  virtual StmLength *clone() const;
  void swap(StmLength &);
};

class StmPosition : public ExpNum
{
public:
  ExpStr *expstr_1;
  ExpStr *expstr_2;

  StmPosition(const StmPosition &);
  StmPosition &operator=(const StmPosition &);
  StmPosition(ExpStr *p1, ExpStr *p2);
  ~StmPosition();
  virtual Integer accept(Visitor *v);
  virtual StmPosition *clone() const;
  void swap(StmPosition &);
};

class StmConcat : public ExpStr
{
public:
  ExpStr *expstr_1;
  ExpStr *expstr_2;

  StmConcat(const StmConcat &);
  StmConcat &operator=(const StmConcat &);
  StmConcat(ExpStr *p1, ExpStr *p2);
  ~StmConcat();
  virtual String accept(Visitor *v);
  virtual StmConcat *clone() const;
  void swap(StmConcat &);
};

class StmSubstr : public ExpStr
{
public:
  ExpStr *expstr_;
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  StmSubstr(const StmSubstr &);
  StmSubstr &operator=(const StmSubstr &);
  StmSubstr(ExpStr *p1, ExpNum *p2, ExpNum *p3);
  ~StmSubstr();
  virtual String accept(Visitor *v);
  virtual StmSubstr *clone() const;
  void swap(StmSubstr &);
};

class EStr : public ExpStr
{
public:
  String string_;

  EStr(const EStr &);
  EStr &operator=(const EStr &);
  EStr(String p1);
  ~EStr();
  virtual String accept(Visitor *v);
  virtual EStr *clone() const;
  void swap(EStr &);
};

class EStrVar : public ExpStr
{
public:
  Ident ident_;

  EStrVar(const EStrVar &);
  EStrVar &operator=(const EStrVar &);
  EStrVar(Ident p1);
  ~EStrVar();
  virtual String accept(Visitor *v);
  virtual EStrVar *clone() const;
  void swap(EStrVar &);
};

class StmReadStr : public ExpStr
{
public:

  StmReadStr(const StmReadStr &);
  StmReadStr &operator=(const StmReadStr &);
  StmReadStr();
  ~StmReadStr();
  virtual String accept(Visitor *v);
  virtual StmReadStr *clone() const;
  void swap(StmReadStr &);
};

class Eeq : public ExpBool
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  Eeq(const Eeq &);
  Eeq &operator=(const Eeq &);
  Eeq(ExpNum *p1, ExpNum *p2);
  ~Eeq();
  virtual bool accept(Visitor *v);
  virtual Eeq *clone() const;
  void swap(Eeq &);
};

class Eneq : public ExpBool
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  Eneq(const Eneq &);
  Eneq &operator=(const Eneq &);
  Eneq(ExpNum *p1, ExpNum *p2);
  ~Eneq();
  virtual bool accept(Visitor *v);
  virtual Eneq *clone() const;
  void swap(Eneq &);
};

class Elt : public ExpBool
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  Elt(const Elt &);
  Elt &operator=(const Elt &);
  Elt(ExpNum *p1, ExpNum *p2);
  ~Elt();
  virtual bool accept(Visitor *v);
  virtual Elt *clone() const;
  void swap(Elt &);
};

class Egt : public ExpBool
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  Egt(const Egt &);
  Egt &operator=(const Egt &);
  Egt(ExpNum *p1, ExpNum *p2);
  ~Egt();
  virtual bool accept(Visitor *v);
  virtual Egt *clone() const;
  void swap(Egt &);
};

class Ele : public ExpBool
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  Ele(const Ele &);
  Ele &operator=(const Ele &);
  Ele(ExpNum *p1, ExpNum *p2);
  ~Ele();
  virtual bool accept(Visitor *v);
  virtual Ele *clone() const;
  void swap(Ele &);
};

class Ege : public ExpBool
{
public:
  ExpNum *expnum_1;
  ExpNum *expnum_2;

  Ege(const Ege &);
  Ege &operator=(const Ege &);
  Ege(ExpNum *p1, ExpNum *p2);
  ~Ege();
  virtual bool accept(Visitor *v);
  virtual Ege *clone() const;
  void swap(Ege &);
};

class OrExp : public ExpBool
{
public:
  ExpBool *expbool_1;
  ExpBool *expbool_2;

  OrExp(const OrExp &);
  OrExp &operator=(const OrExp &);
  OrExp(ExpBool *p1, ExpBool *p2);
  ~OrExp();
  virtual bool accept(Visitor *v);
  virtual OrExp *clone() const;
  void swap(OrExp &);
};

class AndExp : public ExpBool
{
public:
  ExpBool *expbool_1;
  ExpBool *expbool_2;

  AndExp(const AndExp &);
  AndExp &operator=(const AndExp &);
  AndExp(ExpBool *p1, ExpBool *p2);
  ~AndExp();
  virtual bool accept(Visitor *v);
  virtual AndExp *clone() const;
  void swap(AndExp &);
};

class EStrEq : public ExpBool
{
public:
  ExpStr *expstr_1;
  ExpStr *expstr_2;

  EStrEq(const EStrEq &);
  EStrEq &operator=(const EStrEq &);
  EStrEq(ExpStr *p1, ExpStr *p2);
  ~EStrEq();
  virtual bool accept(Visitor *v);
  virtual EStrEq *clone() const;
  void swap(EStrEq &);
};

class EStrNeq : public ExpBool
{
public:
  ExpStr *expstr_1;
  ExpStr *expstr_2;

  EStrNeq(const EStrNeq &);
  EStrNeq &operator=(const EStrNeq &);
  EStrNeq(ExpStr *p1, ExpStr *p2);
  ~EStrNeq();
  virtual bool accept(Visitor *v);
  virtual EStrNeq *clone() const;
  void swap(EStrNeq &);
};

class NotExp : public ExpBool
{
public:
  ExpBool *expbool_;

  NotExp(const NotExp &);
  NotExp &operator=(const NotExp &);
  NotExp(ExpBool *p1);
  ~NotExp();
  virtual bool accept(Visitor *v);
  virtual NotExp *clone() const;
  void swap(NotExp &);
};

class TrueVal : public ExpBool
{
public:

  TrueVal(const TrueVal &);
  TrueVal &operator=(const TrueVal &);
  TrueVal();
  ~TrueVal();
  virtual bool accept(Visitor *v);
  virtual TrueVal *clone() const;
  void swap(TrueVal &);
};

class FalseVal : public ExpBool
{
public:

  FalseVal(const FalseVal &);
  FalseVal &operator=(const FalseVal &);
  FalseVal();
  ~FalseVal();
  virtual bool accept(Visitor *v);
  virtual FalseVal *clone() const;
  void swap(FalseVal &);
};



class ListStm : public Visitable<void>, public std::vector<Stm*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStm *clone() const;
};



#endif
